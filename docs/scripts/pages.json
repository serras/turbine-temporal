[{"name":"data class Step<A>(val result: StepResult, val next: Formula<A>)","description":"fp.serrano.turbine.temporal.formula.Step","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-step/index.html","searchKeys":["Step","data class Step<A>(val result: StepResult, val next: Formula<A>)","fp.serrano.turbine.temporal.formula.Step"]},{"name":"fun <A> Atomic<A>.atomicProgress(x: Result<A>): StepResult","description":"fp.serrano.turbine.temporal.formula.atomicProgress","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/atomic-progress.html","searchKeys":["atomicProgress","fun <A> Atomic<A>.atomicProgress(x: Result<A>): StepResult","fp.serrano.turbine.temporal.formula.atomicProgress"]},{"name":"fun <A> Formula<A>.done(): StepResult","description":"fp.serrano.turbine.temporal.formula.done","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/done.html","searchKeys":["done","fun <A> Formula<A>.done(): StepResult","fp.serrano.turbine.temporal.formula.done"]},{"name":"fun <A> Formula<A>.progress(x: Result<A>): Step<A>","description":"fp.serrano.turbine.temporal.formula.progress","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/progress.html","searchKeys":["progress","fun <A> Formula<A>.progress(x: Result<A>): Step<A>","fp.serrano.turbine.temporal.formula.progress"]},{"name":"fun <A> Step(result: StepResult, next: Formula<A>)","description":"fp.serrano.turbine.temporal.formula.Step.Step","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-step/-step.html","searchKeys":["Step","fun <A> Step(result: StepResult, next: Formula<A>)","fp.serrano.turbine.temporal.formula.Step.Step"]},{"name":"fun <A> always(block: () -> Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.always","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/always.html","searchKeys":["always","fun <A> always(block: () -> Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.always"]},{"name":"fun <A> and(formulae: List<Formula<A>>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.and","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/and.html","searchKeys":["and","fun <A> and(formulae: List<Formula<A>>): Formula<A>","fp.serrano.turbine.temporal.formula.and"]},{"name":"fun <A> and(vararg formulae: Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.and","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/and.html","searchKeys":["and","fun <A> and(vararg formulae: Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.and"]},{"name":"fun <A> eventually(block: () -> Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.eventually","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/eventually.html","searchKeys":["eventually","fun <A> eventually(block: () -> Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.eventually"]},{"name":"fun <A> holds(message: String, predicate: (A) -> Boolean): Atomic<A>","description":"fp.serrano.turbine.temporal.formula.holds","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/holds.html","searchKeys":["holds","fun <A> holds(message: String, predicate: (A) -> Boolean): Atomic<A>","fp.serrano.turbine.temporal.formula.holds"]},{"name":"fun <A> implies(if: Atomic<A>, then: Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.implies","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/implies.html","searchKeys":["implies","fun <A> implies(if: Atomic<A>, then: Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.implies"]},{"name":"fun <A> next(block: () -> Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.next","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/next.html","searchKeys":["next","fun <A> next(block: () -> Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.next"]},{"name":"fun <A> next(block: (A) -> Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.next","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/next.html","searchKeys":["next","fun <A> next(block: (A) -> Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.next"]},{"name":"fun <A> not(formula: Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.not","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/not.html","searchKeys":["not","fun <A> not(formula: Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.not"]},{"name":"fun <A> or(formulae: List<Formula<A>>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.or","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/or.html","searchKeys":["or","fun <A> or(formulae: List<Formula<A>>): Formula<A>","fp.serrano.turbine.temporal.formula.or"]},{"name":"fun <A> or(vararg formulae: Formula<A>): Formula<A>","description":"fp.serrano.turbine.temporal.formula.or","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/or.html","searchKeys":["or","fun <A> or(vararg formulae: Formula<A>): Formula<A>","fp.serrano.turbine.temporal.formula.or"]},{"name":"fun <T : Throwable> throws(klass: KClass<T>, message: String, predicate: (T) -> Boolean = { true }): Atomic<Any?>","description":"fp.serrano.turbine.temporal.formula.throws","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/throws.html","searchKeys":["throws","fun <T : Throwable> throws(klass: KClass<T>, message: String, predicate: (T) -> Boolean = { true }): Atomic<Any?>","fp.serrano.turbine.temporal.formula.throws"]},{"name":"inline fun <M, I : M, O : M> inputOutput(inputMessage: String = \"input message\", outputMessage: String = \"output message\", crossinline predicate: (I, O) -> Boolean): Formula<M>","description":"fp.serrano.turbine.temporal.patterns.inputOutput","location":"turbine-temporal/fp.serrano.turbine.temporal.patterns/input-output.html","searchKeys":["inputOutput","inline fun <M, I : M, O : M> inputOutput(inputMessage: String = \"input message\", outputMessage: String = \"output message\", crossinline predicate: (I, O) -> Boolean): Formula<M>","fp.serrano.turbine.temporal.patterns.inputOutput"]},{"name":"inline fun <T : Throwable> throws(message: String, noinline predicate: (T) -> Boolean = { true }): Atomic<Any?>","description":"fp.serrano.turbine.temporal.formula.throws","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/throws.html","searchKeys":["throws","inline fun <T : Throwable> throws(message: String, noinline predicate: (T) -> Boolean = { true }): Atomic<Any?>","fp.serrano.turbine.temporal.formula.throws"]},{"name":"interface Atomic<in A> : Formula<A> ","description":"fp.serrano.turbine.temporal.formula.Atomic","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-atomic/index.html","searchKeys":["Atomic","interface Atomic<in A> : Formula<A> ","fp.serrano.turbine.temporal.formula.Atomic"]},{"name":"interface Constant : Atomic<Any?> ","description":"fp.serrano.turbine.temporal.formula.Constant","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-constant/index.html","searchKeys":["Constant","interface Constant : Atomic<Any?> ","fp.serrano.turbine.temporal.formula.Constant"]},{"name":"interface Formula<in A>","description":"fp.serrano.turbine.temporal.formula.Formula","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-formula/index.html","searchKeys":["Formula","interface Formula<in A>","fp.serrano.turbine.temporal.formula.Formula"]},{"name":"object FALSE : Constant","description":"fp.serrano.turbine.temporal.formula.FALSE","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-f-a-l-s-e/index.html","searchKeys":["FALSE","object FALSE : Constant","fp.serrano.turbine.temporal.formula.FALSE"]},{"name":"object TRUE : Constant","description":"fp.serrano.turbine.temporal.formula.TRUE","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-t-r-u-e/index.html","searchKeys":["TRUE","object TRUE : Constant","fp.serrano.turbine.temporal.formula.TRUE"]},{"name":"open fun pretty(): String","description":"fp.serrano.turbine.temporal.formula.Formula.pretty","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-formula/pretty.html","searchKeys":["pretty","open fun pretty(): String","fp.serrano.turbine.temporal.formula.Formula.pretty"]},{"name":"open operator fun not(): Formula<A>","description":"fp.serrano.turbine.temporal.formula.Formula.not","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-formula/not.html","searchKeys":["not","open operator fun not(): Formula<A>","fp.serrano.turbine.temporal.formula.Formula.not"]},{"name":"suspend fun <A> Flow<A>.testFormula(timeout: Duration? = null, name: String? = null, block: () -> Formula<A>)","description":"fp.serrano.turbine.temporal.testFormula","location":"turbine-temporal/fp.serrano.turbine.temporal/test-formula.html","searchKeys":["testFormula","suspend fun <A> Flow<A>.testFormula(timeout: Duration? = null, name: String? = null, block: () -> Formula<A>)","fp.serrano.turbine.temporal.testFormula"]},{"name":"suspend fun <A> ReceiveTurbine<A>.formula(block: () -> Formula<A>)","description":"fp.serrano.turbine.temporal.formula","location":"turbine-temporal/fp.serrano.turbine.temporal/formula.html","searchKeys":["formula","suspend fun <A> ReceiveTurbine<A>.formula(block: () -> Formula<A>)","fp.serrano.turbine.temporal.formula"]},{"name":"suspend tailrec fun <A> ReceiveTurbine<A>.formula(formula: Formula<A>)","description":"fp.serrano.turbine.temporal.formula","location":"turbine-temporal/fp.serrano.turbine.temporal/formula.html","searchKeys":["formula","suspend tailrec fun <A> ReceiveTurbine<A>.formula(formula: Formula<A>)","fp.serrano.turbine.temporal.formula"]},{"name":"val next: Formula<A>","description":"fp.serrano.turbine.temporal.formula.Step.next","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-step/next.html","searchKeys":["next","val next: Formula<A>","fp.serrano.turbine.temporal.formula.Step.next"]},{"name":"val result: StepResult","description":"fp.serrano.turbine.temporal.formula.Step.result","location":"turbine-temporal/fp.serrano.turbine.temporal.formula/-step/result.html","searchKeys":["result","val result: StepResult","fp.serrano.turbine.temporal.formula.Step.result"]}]
